# This is the configuration file for the Nginx web server
# The configuration file is made up of simple directives and context blocks

# Directives are the key-value pairs that define the behavior of Nginx
# Context blocks are groups of directives that are enclosed in curly braces

# http context block is used to define the configuration for the HTTP server
http {

    # Any type of files that get served will have a text/plain MIME type by default
    # We need to give the exact file type for the files that we are serving inorder them to properly work

    # We can do this by adding the MIME type to the types block
    # types {
    #     text/html html;
    #     text/css css; 
    # }

    # MIME types for the most common file types are already defined in the mime.types file
    # Instead of adding the MIME type for each file type, we can use the include directive to include the mime.types file
    include mime.types;

    # We care going to specify the servers that we are going to use for load balancing
    upstream servers {
        server localhost:8001;
        server localhost:8002;
        server localhost:8003;
        server localhost:8004;
    }

    # server context block is used to define the configuration for a specific server
    server {
        # Here we are going to define bunch of directives to configure the server

         # This directive tells Nginx to listen on port 8080
        listen 8080;

        # This directive tells Nginx to serve the files from the /opt/homebrew/etc/nginx/webpage directory
        # index.html file will be served by default
        root /opt/homebrew/etc/nginx/webpage;

        # We can set up nginx to act like a load balancer too. 
        # We can 4 running containers of the image created in the servers directory
        # The containers are names server1, server2, server3, server4 and exposed to host ports 8001, 8002, 8003, 8004 respectively
        # We are trying to direct the root endpoint to the 4 containers in a round-robin fashion
        location / {
            # This directive tells Nginx to pass the request to the servers defined in the upstream block
            # The requests will be passed in a round-robin fashion
            proxy_pass http://servers;
        }

        # Here we expect the index.html file inside the fruits directory to be served when the /fruits endpoint is accessed
        location /fruits {
            # This directive tells Nginx to serve the files from the /opt/homebrew/etc/nginx/webpage/fruits directory
            # Note that /fruits is not included in the root directive (appended to the root directive automatically)
            root /opt/homebrew/etc/nginx;
        }

        # If we want to go to a endpoint like /carbs and still serve the index.html file from the fruits directory
        # We can use the alias directive
        location /carbs {
            # This directive tells Nginx to serve the files from the /opt/homebrew/etc/nginx/webpage/fruits directory
            # Note that /fruits is included in the alias directive (not gonna appended to the root directive automatically)
            alias /opt/homebrew/etc/nginx/fruits;
        }

        # If we want to go to a endpoint like /veggies and still serve a veggies.html file instead of the index.html file
        # We can use the try_files directive
        location /vegetables {
            root /opt/homebrew/etc/nginx;
            # By default, Nginx will serve the index.html file
            # Here we are telling Nginx to serve the veggies.html file instead
            # If the veggies.html file is not found, Nginx will serve the index.html inside the /webpage directory
            # If neither file is found, Nginx will return a 404 error
            try_files /vegetables/veggies.html /webpage/index.html  =404;
        }

        # We can also have regular expressions in the location context
        # We need to add ~* to the beginning of the location block to tell Nginx that the location block is a regular expression
        # Here we are telling Nginx to serve the index.html file when the /count/ followed by a number from 0-9 is accessed
        location ~* /count/[0-9] {
            # Here we are telling Nginx to serve the files from the /opt/homebrew/etc/nginx/webpage directory
            root /opt/homebrew/etc/nginx;
            try_files /webpage/index.html  =404;
        }

        # We can redirect from one endpoint to another using the return directive
        # We need to redirect the /crops endpoint to the /fruits endpoint
        # Note that the resulting URL ends with /fruits and not /crops
        location /crops{
            # 307 is the status code for temporary redirect
            return 307 /fruits;
        }

        # But if we want to redirect to an endpoint but still keep the original endpoint in the URL
        # We can use the rewrite directive
        # We need to redirect from number/[0-9] to count/[0-9] but keep the /number/[0-9] endpoint in the URL
        # w+ is a regular expression that matches any number from 0-9
        # $1 is a variable that stores the value of the regular expression
        rewrite ^/number/(\w+) /count/$1;

        
    }

    # Creating another server to listen on port 8081 and serve files from the /opt/homebrew/etc/nginx/webpage directory
    server {
        listen 8081;
        root /opt/homebrew/etc/nginx/webpage;
    }

}

# events context block is used to define the configuration for the connection processing
# We are not going to use this block in our configuration but it is required
events {

}